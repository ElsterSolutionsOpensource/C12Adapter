# /usr/bin/python
#
# Generates
#     src/MeteringSDK/MCORE/private/MTimeZoneMapping.cxx
#     src/MToolsJava/android/MTimeZoneMapping.cxx
# Run this script regularly

import sys
import os
import xml.dom.minidom
import xml.etree.ElementTree as xmldom

mappingUrl      = "http://unicode.org/repos/cldr/trunk/common/supplemental/windowsZones.xml"
outFileNameCxx  = "src/MeteringSDK/MCORE/private/MTimeZoneMapping.cxx"
outFileNameJava = "src/MToolsJava/android/DynamicTimeZoneMapping.java"

def createHeader(outFileName,  ianaVersion, windowsVersion):
    global mappingUrl
    s = "// File " + outFileName + """
//
// DO NOT EDIT! THIS FILE IS GENERATED by script
//    bin/update_timezone_windows_to_iana_mapping.py
// The source is the online data for Windows-to-Iana mapping at
"""
    s += "//    " + mappingUrl + "\n"
    s += "//\n"
    s += "// IANA database version   : " + ianaVersion + "\n"
    s += "// Windows database version: " + windowsVersion + "\n"
    return s

def createFooter():
    return """
// DO NOT EDIT! THIS FILE IS GENERATED!
//
// End of file
"""

def writeText(fileName, text):
    rootDir = os.path.dirname(os.path.dirname(os.path.realpath(__file__))) # two levels up this file to reach development root
    outFileNameList = [rootDir]
    outFileNameList.extend(fileName.split('/'))
    fullOutFileName = os.path.join(*outFileNameList)
    open(fullOutFileName, "wb").write(text.encode('utf8'))       # always write UNIX text format
    print("-- Written: " + fullOutFileName)

def generateMTimeZoneMapping():
    print("-- Reading: " + mappingUrl)
    if sys.version[0] == '2': # Python 2.x
        import urllib2
        windowsZonesText = urllib2.urlopen(mappingUrl).read()
    else:
        import urllib.request
        windowsZonesText = urllib.request.urlopen(mappingUrl).read().decode('utf8')

    el = xmldom.fromstring(windowsZonesText)
    mapTimezonesEl = el.find(".//mapTimezones")
    ianaVersion    = mapTimezonesEl.attrib['typeVersion']
    windowsVersion = mapTimezonesEl.attrib['otherVersion']

    sCpp = createHeader(outFileNameCxx,  ianaVersion, windowsVersion) + """
static const struct MPrivateWindowsToIanaType
{
   const char* m_iana;
   const char* m_windows;
} s_windowsToIana[] =
   {
"""

    sJava = createHeader(outFileNameJava,  ianaVersion, windowsVersion) + """
package com.elster.MTools.android;

public class DynamicTimeZoneMapping {

   public static String[][] windowsToIana = new String[][]
   {
"""

    for e in el.findall('.//mapZone'):
        if e.attrib['territory'] == '001':
            iana = e.attrib['type']
            windows = e.attrib['other']
            padding = 24 - len(iana)
            if padding < 0:
                padding = 0
            sCpp  += '      {"%s",%s"%s"},\n' % (iana, " " * padding, windows)
            sJava += '      {"%s",%s"%s"},\n' % (iana, " " * padding, windows)

    sCpp  = sCpp[:-2] + "\n   };\n" + createFooter();
    sJava = sJava[:-2] + "\n   };\n};\n" + createFooter();

    writeText(outFileNameCxx, sCpp)
    writeText(outFileNameJava, sJava)
    print("-- IANA database version   : " + ianaVersion)
    print("-- Windows database version: " + windowsVersion)

if __name__ == '__main__':
    generateMTimeZoneMapping()
