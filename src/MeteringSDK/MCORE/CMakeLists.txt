PROJECT(MCORE C CXX)
    #         ^^^^^
    # The reason why we need to mention C as a project language:
    #    http://stackoverflow.com/questions/15193785/how-to-get-cmake-to-recognize-pthread-on-ubuntu
    # This was the workaround for an older cmake bug that prevents finding pthreads on Debian

IF(NOT INSIDE_METERINGSDK)
  CMAKE_MINIMUM_REQUIRED(VERSION 3.11)
  INCLUDE(../CMake/Modules/MeteringSDKInternal.cmake)
ENDIF()

IF(NOT M_NO_MULTITHREADING)
  FIND_PACKAGE(Threads REQUIRED)
ENDIF()

ADD_DEFINITIONS(-DMCORE_PROJECT_COMPILING=1)

IF(M_DYNAMIC)
  GLOB_FILES(SOURCE_FILES *.h *.inc *.cpp *.rc)
ELSE()
  GLOB_FILES(SOURCE_FILES *.h *.inc *.cpp)
ENDIF()

ADD_PRECOMPILED_HEADER_FILE(MCOREExtern.h MCOREExtern.cpp SOURCE_FILES)
IF(M_DYNAMIC)
  ADD_LIBRARY(${PROJECT_NAME} SHARED ${SOURCE_FILES})
ELSE()
  ADD_LIBRARY(${PROJECT_NAME} ${SOURCE_FILES})
ENDIF()

IF(CMAKE_USE_PTHREADS_INIT AND NOT CMAKE_SYSTEM_NAME STREQUAL "QNX")
  TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${CMAKE_THREAD_LIBS_INIT})
ENDIF()

# find librt on Linux and Linux-like operating systems
IF(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND NOT ANDROID)
  IF(DEFINED ARM_LINUX_MOXA)
    FIND_LIBRARY(LIBRT_LIBRARY rt
                 ${CROSS_COMPILER_PATH}/arm-linux-gnueabihf/libc/usr/lib/arm-linux-gnueabihf
                 ${CROSS_COMPILER_PATH}/libc/usr/lib/arm-linux-gnueabihf
                 ${CROSS_COMPILER_PATH}/arm-linux-gnueabihf/lib
                 )
  ELSE()
    FIND_LIBRARY(LIBRT_LIBRARY rt)
  ENDIF()
  MESSAGE(STATUS "Real-time support library on Linux: '${LIBRT_LIBRARY}'")
  TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBRT_LIBRARY})
ENDIF()

IF(M_USE_OPENSSL)
  FIND_PACKAGE(OpenSSL REQUIRED)

  MESSAGE(STATUS "OpenSSL include: ${OPENSSL_INCLUDE_DIR}")
  MESSAGE(STATUS "OpenSSL crypto library: ${OPENSSL_CRYPTO_LIBRARY}")

  INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})
  TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${OPENSSL_CRYPTO_LIBRARY}) # ${OPENSSL_LIBRARIES} = ${OPENSSL_CRYPTO_LIBRARY} + ${OPENSSL_SSL_LIBRARY}
ENDIF()

IF(WIN32)
  IF(CMAKE_SYSTEM_NAME STREQUAL "WindowsCE")
    SET(WINSOCK_LIBRARY_NAME ws2)
  ELSE()
    SET(WINSOCK_LIBRARY_NAME ws2_32)
  ENDIF()
  TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${WINSOCK_LIBRARY_NAME})
  IF(WINDOWS_VERSION STRGREATER 0x0599) # support of if_nametoindex is added in Vista, 0x0600, compare strings
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} Iphlpapi)
  ENDIF()
ELSEIF(UNIX)
  IF(CMAKE_SYSTEM_NAME STREQUAL "QNX")
     TARGET_LINK_LIBRARIES(${PROJECT_NAME} socket)
  ENDIF()
ENDIF()

SET_UNIX_SOVERSION(${PROJECT_NAME} ${M_SDK_VERSION})

INSTALL(TARGETS ${PROJECT_NAME}
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  COMPONENT ${PROJECT_NAME})
IF(NOT M_NO_METERINGSDKSETTINGS)
    INCLUDE_DIRECTORIES(${METERINGSDK_BINARY_DIR})
    INSTALL(FILES ${METERINGSDK_BINARY_DIR}/MeteringSDKSettings.h
    DESTINATION include/MeteringSDK)
ENDIF()
INSTALL(DIRECTORY ./
  DESTINATION include/MeteringSDK/${PROJECT_NAME}
  FILES_MATCHING
  PATTERN *.h
  PATTERN *.inc
  PATTERN .svn EXCLUDE
  PATTERN locale EXCLUDE)
INSTALL(DIRECTORY ./private/
  DESTINATION include/MeteringSDK/${PROJECT_NAME}/private
  FILES_MATCHING
  PATTERN *.h
  PATTERN *.hpp
  PATTERN *.inc
  PATTERN .svn EXCLUDE
  PATTERN locale EXCLUDE)
